{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "import os\n",
        "\n",
        "# Mount Google Drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# Explore the directory structure\n",
        "def explore_drive_structure():\n",
        "    print(\"🔍 EXPLORING GOOGLE DRIVE STRUCTURE\")\n",
        "    print(\"=\" * 50)\n",
        "\n",
        "    # Check common locations\n",
        "    possible_locations = [\n",
        "        \"/content/drive/MyDrive/DATA.\",\n",
        "        \"/content/drive/MyDrive/data\",\n",
        "        \"/content/drive/MyDrive/DATASET\",\n",
        "        \"/content/drive/MyDrive/WasteData\",\n",
        "        \"/content/drive/MyDrive\",\n",
        "    ]\n",
        "\n",
        "    for location in possible_locations:\n",
        "        if os.path.exists(location):\n",
        "            print(f\"✅ Found: {location}\")\n",
        "            # List contents\n",
        "            try:\n",
        "                items = os.listdir(location)\n",
        "                print(f\"   Contents: {items}\")\n",
        "\n",
        "                # Check if this contains our data folders\n",
        "                for item in items:\n",
        "                    item_path = os.path.join(location, item)\n",
        "                    if os.path.isdir(item_path):\n",
        "                        sub_items = os.listdir(item_path)\n",
        "                        print(f\"   📁 {item}/: {sub_items}\")\n",
        "            except Exception as e:\n",
        "                print(f\"   ❌ Error reading: {e}\")\n",
        "        else:\n",
        "            print(f\"❌ Not found: {location}\")\n",
        "\n",
        "explore_drive_structure()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nss7ZRaLE5Xc",
        "outputId": "73ab8bc1-20a7-461c-810b-67d9543af1d8"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n",
            "🔍 EXPLORING GOOGLE DRIVE STRUCTURE\n",
            "==================================================\n",
            "✅ Found: /content/drive/MyDrive/DATA.\n",
            "   Contents: ['data']\n",
            "   📁 data/: ['raw data', 'processed']\n",
            "❌ Not found: /content/drive/MyDrive/data\n",
            "❌ Not found: /content/drive/MyDrive/DATASET\n",
            "❌ Not found: /content/drive/MyDrive/WasteData\n",
            "✅ Found: /content/drive/MyDrive\n",
            "   Contents: ['IMG-20250226-WA0001 (1).jpg', 'Resume (3).gdoc', 'Resume (2).gdoc', 'Resume (1).gdoc', 'PORTFOLIO .gdoc', 'JKL.gdoc', 'SL Portfolio.gdoc', 'Resume.gdoc', 'Project proposal.gdoc', 'Untitled.png', 'SL (GWC).pdf', 'answer.gdoc', 'MELUHA                INTERNATIONAL  SCHOOL.gdoc', 'SL (GWC).gdoc', 'Google Earth', 'Untitled document (5).gdoc', 'Awareness Speech on Food Wastage.gdoc', 'Untitled document (4).gdoc', 'Colab Notebooks', 'Untitled video - Made with Clipchamp (1).mp4', '✨AI · The Metaverse_ Opportunities and Challenges (1).pdf', '✨AI · The Metaverse_ Opportunities and Challenges.gdoc', '✨AI · The Metaverse_ Opportunities and Challenges.pdf', 'Family Update.gsite', 'IMG-20250226-WA0001.jpg', 'Smart Food AI Menu App for Restaurants.gdoc', 'Untitled document (3).gdoc', 'cab_rides.gsheet', 'chabot creation.gdoc', 'Untitled document (2).gdoc', 'Untitled document (1).gdoc', 'Untitled document.gdoc', 'SL PERSONAL REFLECTION.gdoc', 'AGI.pdf', 'AGI.gdoc', 'Untitled spreadsheet.gsheet', 'PPEDetect', 'Computer Vision-based Waste Segregation System for Smart Cities', 'DATA.']\n",
            "   📁 Google Earth/: ['Untitled project']\n",
            "   📁 Colab Notebooks/: ['Untitled0.ipynb', 'Untitled1.ipynb', 'Untitled2.ipynb', 'Untitled3.ipynb', 'Untitled4.ipynb', 'Untitled5.ipynb', 'Untitled (4)', 'Untitled6.ipynb', 'Untitled7.ipynb', 'Untitled8.ipynb', 'Untitled (3)', 'Untitled9.ipynb', 'Untitled10.ipynb', 'Untitled11.ipynb', 'Untitled12.ipynb', 'Untitled13.ipynb', 'Untitled14.ipynb', 'sumative project(AI).ipynb', 'disney hotstar', 'Untitled15.ipynb', 'Untitled16.ipynb', 'Copy of Updated API_Get_Started_with_GenAI.ipynb', 'Matrix AI.ipynb', 'Untitled17.ipynb', 'Untitled18.ipynb', 'Untitled20.ipynb', 'mining the data.ipynb', 'Untitled21.ipynb', 'data mining.ipynb', 'Untitled19.ipynb', 'Untitled22.ipynb', 'Untitled (2)', 'Untitled23.ipynb', 'Unit_5_NLP_Using_python_Nltk_Pipeline.ipynb', 'Unit_4_Working_with__images_operations (1).ipynb', 'Unit_4_Working_with__images_operations.ipynb', 'Untitled24.ipynb', 'Untitled25.ipynb', 'Untitled26.ipynb', 'Untitled27.ipynb', 'Copy of PPE_Detection (2).ipynb', 'ppe detection.ipynb', 'Untitled28.ipynb', 'Copy of PPE_Detection (1).ipynb', 'Copy of PPE_Detection.ipynb', 'Untitled (1)', 'Untitled29.ipynb', 'Untitled', 'Computer Vision-based Waste Segregation System for Smart Cities']\n",
            "   📁 PPEDetect/: ['Dataset']\n",
            "   📁 Computer Vision-based Waste Segregation System for Smart Cities/: []\n",
            "   📁 DATA./: ['data']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Search for folders that might contain your dataset\n",
        "def search_for_dataset_folders():\n",
        "    print(\"\\n🔍 SEARCHING FOR DATASET FOLDERS\")\n",
        "    print(\"=\" * 50)\n",
        "\n",
        "    search_locations = [\n",
        "        \"/content/drive/MyDrive/DATA./data\",\n",
        "        \"/content/drive/MyDrive/DATA\",\n",
        "    ]\n",
        "\n",
        "    target_folders = ['battery', 'plastic', 'paper', 'metal', 'glass', 'biological', 'trash', 'shoes', 'clothes', 'cardboard']\n",
        "\n",
        "    for base_path in search_locations:\n",
        "        if os.path.exists(base_path):\n",
        "            print(f\"\\n📁 Searching in: {base_path}\")\n",
        "\n",
        "            # List all items in this directory\n",
        "            all_items = os.listdir(base_path)\n",
        "            print(f\"All items here: {all_items}\")\n",
        "\n",
        "            # Check for our target folders\n",
        "            found_folders = []\n",
        "            for folder in target_folders:\n",
        "                folder_path = os.path.join(base_path, folder)\n",
        "                if os.path.exists(folder_path) and os.path.isdir(folder_path):\n",
        "                    images = [f for f in os.listdir(folder_path) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]\n",
        "                    found_folders.append((folder, len(images)))\n",
        "                    print(f\"   ✅ Found {folder}: {len(images)} images\")\n",
        "\n",
        "            if found_folders:\n",
        "                print(f\"🎯 Found dataset folders: {found_folders}\")\n",
        "                return base_path, found_folders\n",
        "\n",
        "    print(\"❌ No dataset folders found in common locations\")\n",
        "    return None, []\n",
        "\n",
        "base_path, found_folders = search_for_dataset_folders()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZpcwO9IHF7lb",
        "outputId": "a9414236-5b9c-48cf-d5e1-00c88e92fb08"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "🔍 SEARCHING FOR DATASET FOLDERS\n",
            "==================================================\n",
            "\n",
            "📁 Searching in: /content/drive/MyDrive/DATA./data\n",
            "All items here: ['raw data', 'processed']\n",
            "❌ No dataset folders found in common locations\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Specifically check what's in /content/drive/MyDrive/DATA\n",
        "data_path = \"/content/drive/MyDrive/DATA./data\"\n",
        "if os.path.exists(data_path):\n",
        "    print(f\"📁 Contents of {data_path}:\")\n",
        "    items = os.listdir(data_path)\n",
        "    for item in items:\n",
        "        item_path = os.path.join(data_path, item)\n",
        "        if os.path.isdir(item_path):\n",
        "            sub_items = os.listdir(item_path)\n",
        "            print(f\"   📁 {item}/: {len(sub_items)} items\")\n",
        "            # Show first few items\n",
        "            for sub_item in sub_items[:3]:\n",
        "                print(f\"      - {sub_item}\")\n",
        "            if len(sub_items) > 3:\n",
        "                print(f\"      ... and {len(sub_items) - 3} more\")\n",
        "        else:\n",
        "            print(f\"   📄 {item}\")\n",
        "else:\n",
        "    print(f\"❌ {data_path} does not exist\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VO273bYgGTk6",
        "outputId": "ccb0a79a-d575-49e3-b1af-b98099310075"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📁 Contents of /content/drive/MyDrive/DATA./data:\n",
            "   📁 raw data/: 10 items\n",
            "      - cardboard\n",
            "      - biological\n",
            "      - clothes\n",
            "      ... and 7 more\n",
            "   📁 processed/: 3 items\n",
            "      - training\n",
            "      - validation\n",
            "      - testing\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import shutil\n",
        "import random\n",
        "from google.colab import drive\n",
        "\n",
        "# Mount Google Drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "def organize_waste_dataset_colab():\n",
        "    \"\"\"\n",
        "    Colab-compatible version with corrected paths\n",
        "    \"\"\"\n",
        "\n",
        "    # CORRECTED PATHS - using \"raw data\" instead of \"raw_data\"\n",
        "    base_path = \"/content/drive/MyDrive/DATA./data\"\n",
        "    raw_data_path = f\"{base_path}/raw data\"\n",
        "    processed_path = f\"{base_path}/processed\"\n",
        "\n",
        "    print(f\"📁 Raw data path: {raw_data_path}\")\n",
        "    print(f\"📁 Processed path: {processed_path}\")\n",
        "\n",
        "    # Check if paths exist\n",
        "    if not os.path.exists(raw_data_path):\n",
        "        print(f\"❌ Raw data path not found: {raw_data_path}\")\n",
        "        # Let's see what actually exists\n",
        "        if os.path.exists(base_path):\n",
        "            print(f\"📁 Contents of {base_path}:\")\n",
        "            for item in os.listdir(base_path):\n",
        "                print(f\"   - {item}\")\n",
        "        return 0\n",
        "\n",
        "    if not os.path.exists(processed_path):\n",
        "        print(f\"❌ Processed path not found: {processed_path}\")\n",
        "        return 0\n",
        "\n",
        "    # Category mapping\n",
        "    category_mapping = {\n",
        "        # 🔴 HAZARDOUS (Red Bin)\n",
        "        'hazardous': ['battery'],\n",
        "\n",
        "        # 🔵 RECYCLABLE (Blue Bin)\n",
        "        'recyclable': ['plastic', 'paper', 'metal', 'glass', 'cardboard', 'clothes'],\n",
        "\n",
        "        # 🟢 BIODEGRADABLE (Green Bin)\n",
        "        'biodegradable': ['biological', 'trash', 'shoes']\n",
        "    }\n",
        "\n",
        "    # First, let's check what folders actually exist in raw data\n",
        "    print(\"\\n🔍 Checking raw data folders:\")\n",
        "    existing_folders = os.listdir(raw_data_path)\n",
        "    print(f\"Found folders: {existing_folders}\")\n",
        "\n",
        "    # Create processed directory structure\n",
        "    splits = ['training', 'validation', 'testing']\n",
        "    for split in splits:\n",
        "        for category in category_mapping.keys():\n",
        "            category_path = os.path.join(processed_path, split, category)\n",
        "            os.makedirs(category_path, exist_ok=True)\n",
        "            print(f\"✅ Created folder: {category_path}\")\n",
        "\n",
        "    # Split ratios\n",
        "    train_ratio = 0.70\n",
        "    val_ratio = 0.15\n",
        "    test_ratio = 0.15\n",
        "\n",
        "    print(\"\\n🚀 Starting dataset organization...\")\n",
        "\n",
        "    total_copied = 0\n",
        "\n",
        "    # Process each waste category\n",
        "    for target_category, source_folders in category_mapping.items():\n",
        "        print(f\"\\n📂 Processing {target_category.upper()} category...\")\n",
        "\n",
        "        all_images = []\n",
        "\n",
        "        # Collect all images from source folders\n",
        "        for source_folder in source_folders:\n",
        "            source_path = os.path.join(raw_data_path, source_folder)\n",
        "\n",
        "            if not os.path.exists(source_path):\n",
        "                print(f\"   ⚠️  Folder '{source_folder}' not found at {source_path}, skipping...\")\n",
        "                continue\n",
        "\n",
        "            # Get all image files\n",
        "            image_files = []\n",
        "            for f in os.listdir(source_path):\n",
        "                if f.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp')):\n",
        "                    image_files.append(f)\n",
        "\n",
        "            print(f\"   📁 {source_folder}: {len(image_files)} images\")\n",
        "            all_images.extend([(source_folder, f) for f in image_files])\n",
        "\n",
        "        if not all_images:\n",
        "            print(f\"   ❌ No images found for {target_category}\")\n",
        "            continue\n",
        "\n",
        "        # Shuffle images for random split\n",
        "        random.shuffle(all_images)\n",
        "        total_images = len(all_images)\n",
        "\n",
        "        # Calculate split sizes\n",
        "        train_count = int(total_images * train_ratio)\n",
        "        val_count = int(total_images * val_ratio)\n",
        "        test_count = total_images - train_count - val_count\n",
        "\n",
        "        print(f\"   📊 Total images: {total_images}\")\n",
        "        print(f\"   📈 Split: Train({train_count}), Val({val_count}), Test({test_count})\")\n",
        "\n",
        "        # Split images\n",
        "        train_images = all_images[:train_count]\n",
        "        val_images = all_images[train_count:train_count + val_count]\n",
        "        test_images = all_images[train_count + val_count:]\n",
        "\n",
        "        # Copy images to respective folders\n",
        "        copy_count = 0\n",
        "        for split_name, split_images in zip(splits, [train_images, val_images, test_images]):\n",
        "            for source_folder, image_file in split_images:\n",
        "                src_path = os.path.join(raw_data_path, source_folder, image_file)\n",
        "                dst_path = os.path.join(processed_path, split_name, target_category, image_file)\n",
        "\n",
        "                try:\n",
        "                    shutil.copy2(src_path, dst_path)\n",
        "                    copy_count += 1\n",
        "                except Exception as e:\n",
        "                    print(f\"   ❌ Error copying {image_file}: {e}\")\n",
        "\n",
        "        total_copied += copy_count\n",
        "        print(f\"   ✅ {target_category}: Copied {copy_count} images!\")\n",
        "\n",
        "    return total_copied\n",
        "\n",
        "def verify_organization_colab():\n",
        "    \"\"\"\n",
        "    Verify that the organization was successful\n",
        "    \"\"\"\n",
        "    print(\"\\n\" + \"=\"*50)\n",
        "    print(\"🔍 VERIFYING ORGANIZATION\")\n",
        "    print(\"=\"*50)\n",
        "\n",
        "    base_path = \"/content/drive/MyDrive/DATA./data\"\n",
        "    processed_path = f\"{base_path}/processed\"\n",
        "\n",
        "    splits = ['training', 'validation', 'testing']\n",
        "    categories = ['hazardous', 'recyclable', 'biodegradable']\n",
        "\n",
        "    total_images = 0\n",
        "\n",
        "    for split in splits:\n",
        "        print(f\"\\n📊 {split.upper()} Split:\")\n",
        "        for category in categories:\n",
        "            category_path = os.path.join(processed_path, split, category)\n",
        "            if os.path.exists(category_path):\n",
        "                image_files = [f for f in os.listdir(category_path)\n",
        "                             if f.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp'))]\n",
        "                image_count = len(image_files)\n",
        "                print(f\"   📁 {category}: {image_count} images\")\n",
        "                total_images += image_count\n",
        "\n",
        "                # Show first 2 files as proof\n",
        "                if image_files:\n",
        "                    print(f\"      Sample: {image_files[:2]}\")\n",
        "            else:\n",
        "                print(f\"   ❌ {category}: FOLDER NOT FOUND at {category_path}\")\n",
        "\n",
        "    print(f\"\\n🎯 TOTAL IMAGES ORGANIZED: {total_images}\")\n",
        "    return total_images\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    print(\"🗑️ WASTE DATASET ORGANIZER - CORRECTED PATHS\")\n",
        "    print(\"=\"*50)\n",
        "\n",
        "    # Run organization\n",
        "    total_copied = organize_waste_dataset_colab()\n",
        "\n",
        "    # Verify results\n",
        "    total_verified = verify_organization_colab()\n",
        "\n",
        "    if total_verified > 0:\n",
        "        print(f\"\\n🎉 SUCCESS! Organized {total_verified} images!\")\n",
        "        print(\"\\n📁 Your organized dataset is ready for model training! 🚀\")\n",
        "    else:\n",
        "        print(\"\\n❌ Organization failed! Please check the paths above.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NMnljxigG1fN",
        "outputId": "163ff9db-4e88-446f-921a-e0c822bf4bb2"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n",
            "🗑️ WASTE DATASET ORGANIZER - CORRECTED PATHS\n",
            "==================================================\n",
            "📁 Raw data path: /content/drive/MyDrive/DATA./data/raw data\n",
            "📁 Processed path: /content/drive/MyDrive/DATA./data/processed\n",
            "\n",
            "🔍 Checking raw data folders:\n",
            "Found folders: ['cardboard', 'biological', 'clothes', 'metal', 'battery', 'glass', 'shoes', 'plastic', 'paper', 'trash']\n",
            "✅ Created folder: /content/drive/MyDrive/DATA./data/processed/training/hazardous\n",
            "✅ Created folder: /content/drive/MyDrive/DATA./data/processed/training/recyclable\n",
            "✅ Created folder: /content/drive/MyDrive/DATA./data/processed/training/biodegradable\n",
            "✅ Created folder: /content/drive/MyDrive/DATA./data/processed/validation/hazardous\n",
            "✅ Created folder: /content/drive/MyDrive/DATA./data/processed/validation/recyclable\n",
            "✅ Created folder: /content/drive/MyDrive/DATA./data/processed/validation/biodegradable\n",
            "✅ Created folder: /content/drive/MyDrive/DATA./data/processed/testing/hazardous\n",
            "✅ Created folder: /content/drive/MyDrive/DATA./data/processed/testing/recyclable\n",
            "✅ Created folder: /content/drive/MyDrive/DATA./data/processed/testing/biodegradable\n",
            "\n",
            "🚀 Starting dataset organization...\n",
            "\n",
            "📂 Processing HAZARDOUS category...\n",
            "   📁 battery: 282 images\n",
            "   📊 Total images: 282\n",
            "   📈 Split: Train(197), Val(42), Test(43)\n",
            "   ✅ hazardous: Copied 282 images!\n",
            "\n",
            "📂 Processing RECYCLABLE category...\n",
            "   📁 plastic: 126 images\n",
            "   📁 paper: 278 images\n",
            "   📁 metal: 280 images\n",
            "   📁 glass: 426 images\n",
            "   📁 cardboard: 261 images\n",
            "   📁 clothes: 431 images\n",
            "   📊 Total images: 1802\n",
            "   📈 Split: Train(1261), Val(270), Test(271)\n",
            "   ✅ recyclable: Copied 1802 images!\n",
            "\n",
            "📂 Processing BIODEGRADABLE category...\n",
            "   📁 biological: 240 images\n",
            "   📁 trash: 192 images\n",
            "   📁 shoes: 304 images\n",
            "   📊 Total images: 736\n",
            "   📈 Split: Train(515), Val(110), Test(111)\n",
            "   ✅ biodegradable: Copied 736 images!\n",
            "\n",
            "==================================================\n",
            "🔍 VERIFYING ORGANIZATION\n",
            "==================================================\n",
            "\n",
            "📊 TRAINING Split:\n",
            "   📁 hazardous: 282 images\n",
            "      Sample: ['battery_195.jpg', 'battery_259.jpg']\n",
            "   📁 recyclable: 1798 images\n",
            "      Sample: ['glass_1046.jpg', 'metal_1538.jpg']\n",
            "   📁 biodegradable: 736 images\n",
            "      Sample: ['biological_160.jpg', 'biological_188.jpg']\n",
            "\n",
            "📊 VALIDATION Split:\n",
            "   📁 hazardous: 205 images\n",
            "      Sample: ['battery_109.jpg', 'battery_287.jpg']\n",
            "   📁 recyclable: 1205 images\n",
            "      Sample: ['metal_1447.jpg', 'clothes_1088.jpg']\n",
            "   📁 biodegradable: 533 images\n",
            "      Sample: ['biological_18.jpg', 'shoes_1163.jpg']\n",
            "\n",
            "📊 TESTING Split:\n",
            "   📁 hazardous: 206 images\n",
            "      Sample: ['battery_318.jpg', 'battery_232.jpg']\n",
            "   📁 recyclable: 1232 images\n",
            "      Sample: ['plastic_1142.jpg', 'clothes_1351.jpg']\n",
            "   📁 biodegradable: 545 images\n",
            "      Sample: ['trash_119.jpg', 'trash_20240626_155654.jpg']\n",
            "\n",
            "🎯 TOTAL IMAGES ORGANIZED: 6742\n",
            "\n",
            "🎉 SUCCESS! Organized 6742 images!\n",
            "\n",
            "📁 Your organized dataset is ready for model training! 🚀\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from PIL import Image\n",
        "\n",
        "def explore_organized_dataset():\n",
        "    \"\"\"\n",
        "    Explore and visualize the organized dataset\n",
        "    \"\"\"\n",
        "    base_path = \"/content/drive/MyDrive/DATA./data\"\n",
        "    processed_path = f\"{base_path}/processed\"\n",
        "\n",
        "    print(\"🔍 EXPLORING ORGANIZED DATASET\")\n",
        "    print(\"=\" * 50)\n",
        "\n",
        "    splits = ['training', 'validation', 'testing']\n",
        "    categories = ['hazardous', 'recyclable', 'biodegradable']\n",
        "    bin_colors = ['red', 'blue', 'green']\n",
        "\n",
        "    # Count images in each category\n",
        "    category_counts = {}\n",
        "\n",
        "    plt.figure(figsize=(15, 5))\n",
        "\n",
        "    for i, split in enumerate(splits):\n",
        "        split_counts = []\n",
        "        for category in categories:\n",
        "            category_path = os.path.join(processed_path, split, category)\n",
        "            if os.path.exists(category_path):\n",
        "                image_count = len([f for f in os.listdir(category_path)\n",
        "                                 if f.lower().endswith(('.png', '.jpg', '.jpeg'))])\n",
        "                split_counts.append(image_count)\n",
        "\n",
        "                if category not in category_counts:\n",
        "                    category_counts[category] = 0\n",
        "                category_counts[category] += image_count\n",
        "\n",
        "        # Plot distribution for this split\n",
        "        plt.subplot(1, 3, i+1)\n",
        "        bars = plt.bar(categories, split_counts, color=bin_colors, alpha=0.7)\n",
        "        plt.title(f'{split.upper()} Split\\nTotal: {sum(split_counts)} images')\n",
        "        plt.xticks(rotation=45)\n",
        "        plt.ylabel('Number of Images')\n",
        "\n",
        "        # Add value labels on bars\n",
        "        for bar, count in zip(bars, split_counts):\n",
        "            plt.text(bar.get_x() + bar.get_width()/2, bar.get_height() + 5,\n",
        "                    str(count), ha='center', va='bottom')\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.savefig(f'{base_path}/dataset_distribution.png')\n",
        "    plt.show()\n",
        "\n",
        "    # Print summary\n",
        "    print(\"\\n📊 DATASET SUMMARY:\")\n",
        "    print(\"=\" * 30)\n",
        "    total_images = sum(category_counts.values())\n",
        "    print(f\"Total Images: {total_images}\")\n",
        "\n",
        "    for category, count in category_counts.items():\n",
        "        percentage = (count / total_images) * 100\n",
        "        bin_color = \"🔴\" if category == \"hazardous\" else \"🔵\" if category == \"recyclable\" else \"🟢\"\n",
        "        print(f\"{bin_color} {category.upper()}: {count} images ({percentage:.1f}%)\")\n",
        "\n",
        "    # Check image dimensions\n",
        "    print(\"\\n📏 CHECKING IMAGE DIMENSIONS:\")\n",
        "    print(\"=\" * 30)\n",
        "    check_image_sizes(processed_path)\n",
        "\n",
        "def check_image_sizes(processed_path):\n",
        "    \"\"\"\n",
        "    Check the dimensions of images in the dataset\n",
        "    \"\"\"\n",
        "    sample_sizes = []\n",
        "\n",
        "    # Check a few images from each category\n",
        "    for category in ['hazardous', 'recyclable', 'biodegradable']:\n",
        "        category_path = os.path.join(processed_path, 'training', category)\n",
        "        if os.path.exists(category_path):\n",
        "            images = [f for f in os.listdir(category_path)\n",
        "                     if f.lower().endswith(('.png', '.jpg', '.jpeg'))][:3]  # Check first 3\n",
        "\n",
        "            for img_name in images:\n",
        "                img_path = os.path.join(category_path, img_name)\n",
        "                try:\n",
        "                    with Image.open(img_path) as img:\n",
        "                        sample_sizes.append(img.size)\n",
        "                        print(f\"   {category}/{img_name}: {img.size}\")\n",
        "                except Exception as e:\n",
        "                    print(f\"   ❌ Error reading {img_name}: {e}\")\n",
        "\n",
        "    if sample_sizes:\n",
        "        avg_width = sum(size[0] for size in sample_sizes) / len(sample_sizes)\n",
        "        avg_height = sum(size[1] for size in sample_sizes) / len(sample_sizes)\n",
        "        print(f\"\\n📐 Average image size: {avg_width:.0f} x {avg_height:.0f} pixels\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    explore_organized_dataset()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 905
        },
        "id": "6nhazCXPH35h",
        "outputId": "b6d9c800-675d-4fd5-878b-33b820b5fec6"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔍 EXPLORING ORGANIZED DATASET\n",
            "==================================================\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "📊 DATASET SUMMARY:\n",
            "==============================\n",
            "Total Images: 6742\n",
            "🔴 HAZARDOUS: 693 images (10.3%)\n",
            "🔵 RECYCLABLE: 4235 images (62.8%)\n",
            "🟢 BIODEGRADABLE: 1814 images (26.9%)\n",
            "\n",
            "📏 CHECKING IMAGE DIMENSIONS:\n",
            "==============================\n",
            "   hazardous/battery_195.jpg: (225, 225)\n",
            "   hazardous/battery_259.jpg: (240, 210)\n",
            "   hazardous/battery_143.jpg: (225, 225)\n",
            "   recyclable/glass_1046.jpg: (474, 631)\n",
            "   recyclable/metal_1538.jpg: (474, 474)\n",
            "   recyclable/clothes_1170.jpg: (400, 533)\n",
            "   biodegradable/biological_160.jpg: (279, 181)\n",
            "   biodegradable/biological_188.jpg: (217, 232)\n",
            "   biodegradable/trash_20240626_151725.jpg: (800, 450)\n",
            "\n",
            "📐 Average image size: 370 x 351 pixels\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras.applications import MobileNetV2\n",
        "from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout\n",
        "from tensorflow.keras.models import Model\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import os\n",
        "\n",
        "def train_waste_classifier():\n",
        "    \"\"\"\n",
        "    Train a waste classification model using Transfer Learning\n",
        "    \"\"\"\n",
        "    print(\"🚀 STARTING MODEL TRAINING\")\n",
        "    print(\"=\" * 50)\n",
        "\n",
        "    # Set paths\n",
        "    base_path = \"/content/drive/MyDrive/DATA./data\"\n",
        "    train_path = f\"{base_path}/processed/training\"\n",
        "    val_path = f\"{base_path}/processed/validation\"\n",
        "\n",
        "    # Model parameters\n",
        "    IMG_SIZE = (224, 224)\n",
        "    BATCH_SIZE = 32\n",
        "    NUM_CLASSES = 3\n",
        "    EPOCHS = 15\n",
        "\n",
        "    print(f\"📁 Training data: {train_path}\")\n",
        "    print(f\"📁 Validation data: {val_path}\")\n",
        "    print(f\"🖼️  Image size: {IMG_SIZE}\")\n",
        "    print(f\"📦 Batch size: {BATCH_SIZE}\")\n",
        "    print(f\"🎯 Number of classes: {NUM_CLASSES}\")\n",
        "\n",
        "    # Data Augmentation for Training\n",
        "    train_datagen = ImageDataGenerator(\n",
        "        rescale=1./255,\n",
        "        rotation_range=20,\n",
        "        width_shift_range=0.2,\n",
        "        height_shift_range=0.2,\n",
        "        shear_range=0.2,\n",
        "        zoom_range=0.2,\n",
        "        horizontal_flip=True,\n",
        "        fill_mode='nearest'\n",
        "    )\n",
        "\n",
        "    # Only rescaling for Validation\n",
        "    val_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "    # Create data generators\n",
        "    print(\"\\n📊 Creating data generators...\")\n",
        "\n",
        "    train_generator = train_datagen.flow_from_directory(\n",
        "        train_path,\n",
        "        target_size=IMG_SIZE,\n",
        "        batch_size=BATCH_SIZE,\n",
        "        class_mode='categorical',\n",
        "        shuffle=True\n",
        "    )\n",
        "\n",
        "    val_generator = val_datagen.flow_from_directory(\n",
        "        val_path,\n",
        "        target_size=IMG_SIZE,\n",
        "        batch_size=BATCH_SIZE,\n",
        "        class_mode='categorical',\n",
        "        shuffle=False\n",
        "    )\n",
        "\n",
        "    # Print class indices\n",
        "    print(f\"🎯 Class indices: {train_generator.class_indices}\")\n",
        "\n",
        "    # Build the Model using Transfer Learning\n",
        "    print(\"\\n🛠️ Building the model...\")\n",
        "\n",
        "    # Load pre-trained MobileNetV2\n",
        "    base_model = MobileNetV2(\n",
        "        weights='imagenet',\n",
        "        include_top=False,\n",
        "        input_shape=(224, 224, 3)\n",
        "    )\n",
        "\n",
        "    # Freeze base model layers initially\n",
        "    base_model.trainable = False\n",
        "\n",
        "    # Add custom layers on top\n",
        "    inputs = keras.Input(shape=(224, 224, 3))\n",
        "    x = base_model(inputs, training=False)\n",
        "    x = GlobalAveragePooling2D()(x)\n",
        "    x = Dense(128, activation='relu')(x)\n",
        "    x = Dropout(0.3)(x)\n",
        "    outputs = Dense(NUM_CLASSES, activation='softmax')(x)\n",
        "\n",
        "    model = Model(inputs, outputs)\n",
        "\n",
        "    # Compile the model\n",
        "    model.compile(\n",
        "        optimizer=Adam(learning_rate=0.001),\n",
        "        loss='categorical_crossentropy',\n",
        "        metrics=['accuracy']\n",
        "    )\n",
        "\n",
        "    print(\"✅ Model compiled successfully!\")\n",
        "    print(model.summary())\n",
        "\n",
        "    # Callbacks\n",
        "    early_stop = EarlyStopping(\n",
        "        monitor='val_accuracy',\n",
        "        patience=5,\n",
        "        restore_best_weights=True\n",
        "    )\n",
        "\n",
        "    reduce_lr = ReduceLROnPlateau(\n",
        "        monitor='val_loss',\n",
        "        factor=0.2,\n",
        "        patience=3,\n",
        "        min_lr=0.0001\n",
        "    )\n",
        "\n",
        "    # Train the model\n",
        "    print(\"\\n🎯 Starting training...\")\n",
        "\n",
        "    history = model.fit(\n",
        "        train_generator,\n",
        "        steps_per_epoch=train_generator.samples // BATCH_SIZE,\n",
        "        epochs=EPOCHS,\n",
        "        validation_data=val_generator,\n",
        "        validation_steps=val_generator.samples // BATCH_SIZE,\n",
        "        callbacks=[early_stop, reduce_lr],\n",
        "        verbose=1\n",
        "    )\n",
        "\n",
        "    # Fine-tuning: Unfreeze some layers\n",
        "    print(\"\\n🔧 Starting fine-tuning...\")\n",
        "\n",
        "    # Unfreeze the top layers of the base model\n",
        "    base_model.trainable = True\n",
        "    for layer in base_model.layers[:100]:\n",
        "        layer.trainable = False\n",
        "\n",
        "    # Recompile with lower learning rate\n",
        "    model.compile(\n",
        "        optimizer=Adam(learning_rate=0.0001/10),\n",
        "        loss='categorical_crossentropy',\n",
        "        metrics=['accuracy']\n",
        "    )\n",
        "\n",
        "    # Fine-tune for a few more epochs\n",
        "    fine_tune_epochs = 10\n",
        "    total_epochs = len(history.history['accuracy']) + fine_tune_epochs\n",
        "\n",
        "    history_fine = model.fit(\n",
        "        train_generator,\n",
        "        steps_per_epoch=train_generator.samples // BATCH_SIZE,\n",
        "        epochs=total_epochs,\n",
        "        initial_epoch=len(history.history['accuracy']),\n",
        "        validation_data=val_generator,\n",
        "        validation_steps=val_generator.samples // BATCH_SIZE,\n",
        "        callbacks=[early_stop, reduce_lr],\n",
        "        verbose=1\n",
        "    )\n",
        "\n",
        "    # Combine histories\n",
        "    for key in history.history.keys():\n",
        "        history.history[key].extend(history_fine.history[key])\n",
        "\n",
        "    # Save the model\n",
        "    model_save_path = f\"{base_path}/models/waste_classifier.h5\"\n",
        "    os.makedirs(os.path.dirname(model_save_path), exist_ok=True)\n",
        "    model.save(model_save_path)\n",
        "    print(f\"✅ Model saved to: {model_save_path}\")\n",
        "\n",
        "    return model, history, train_generator.class_indices\n",
        "\n",
        "def plot_training_history(history):\n",
        "    \"\"\"\n",
        "    Plot training history\n",
        "    \"\"\"\n",
        "    plt.figure(figsize=(12, 4))\n",
        "\n",
        "    # Plot accuracy\n",
        "    plt.subplot(1, 2, 1)\n",
        "    plt.plot(history.history['accuracy'], label='Training Accuracy')\n",
        "    plt.plot(history.history['val_accuracy'], label='Validation Accuracy')\n",
        "    plt.title('Model Accuracy')\n",
        "    plt.xlabel('Epoch')\n",
        "    plt.ylabel('Accuracy')\n",
        "    plt.legend()\n",
        "\n",
        "    # Plot loss\n",
        "    plt.subplot(1, 2, 2)\n",
        "    plt.plot(history.history['loss'], label='Training Loss')\n",
        "    plt.plot(history.history['val_loss'], label='Validation Loss')\n",
        "    plt.title('Model Loss')\n",
        "    plt.xlabel('Epoch')\n",
        "    plt.ylabel('Loss')\n",
        "    plt.legend()\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.savefig('/content/drive/MyDrive/DATA/training_history.png')\n",
        "    plt.show()\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    # Train the model\n",
        "    model, history, class_indices = train_waste_classifier()\n",
        "\n",
        "    # Plot training history\n",
        "    plot_training_history(history)\n",
        "\n",
        "    # Print final metrics\n",
        "    final_train_acc = history.history['accuracy'][-1]\n",
        "    final_val_acc = history.history['val_accuracy'][-1]\n",
        "\n",
        "    print(f\"\\n🎯 FINAL TRAINING RESULTS:\")\n",
        "    print(\"=\" * 30)\n",
        "    print(f\"📈 Final Training Accuracy: {final_train_acc:.4f} ({final_train_acc*100:.2f}%)\")\n",
        "    print(f\"📊 Final Validation Accuracy: {final_val_acc:.4f} ({final_val_acc*100:.2f}%)\")\n",
        "    print(f\"🎯 Class mapping: {class_indices}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "En2kO9SbItvi",
        "outputId": "707622d9-e527-4e6d-efc6-3d9d3c395cb5"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🚀 STARTING MODEL TRAINING\n",
            "==================================================\n",
            "📁 Training data: /content/drive/MyDrive/DATA./data/processed/training\n",
            "📁 Validation data: /content/drive/MyDrive/DATA./data/processed/validation\n",
            "🖼️  Image size: (224, 224)\n",
            "📦 Batch size: 32\n",
            "🎯 Number of classes: 3\n",
            "\n",
            "📊 Creating data generators...\n",
            "Found 2816 images belonging to 3 classes.\n",
            "Found 1943 images belonging to 3 classes.\n",
            "🎯 Class indices: {'biodegradable': 0, 'hazardous': 1, 'recyclable': 2}\n",
            "\n",
            "🛠️ Building the model...\n",
            "Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/mobilenet_v2/mobilenet_v2_weights_tf_dim_ordering_tf_kernels_1.0_224_no_top.h5\n",
            "\u001b[1m9406464/9406464\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 0us/step\n",
            "✅ Model compiled successfully!\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1mModel: \"functional\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"functional\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
              "│ input_layer_1 (\u001b[38;5;33mInputLayer\u001b[0m)      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m224\u001b[0m, \u001b[38;5;34m3\u001b[0m)    │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ mobilenetv2_1.00_224            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m1280\u001b[0m)     │     \u001b[38;5;34m2,257,984\u001b[0m │\n",
              "│ (\u001b[38;5;33mFunctional\u001b[0m)                    │                        │               │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ global_average_pooling2d        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1280\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n",
              "│ (\u001b[38;5;33mGlobalAveragePooling2D\u001b[0m)        │                        │               │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │       \u001b[38;5;34m163,968\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m3\u001b[0m)              │           \u001b[38;5;34m387\u001b[0m │\n",
              "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
              "│ input_layer_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">InputLayer</span>)      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">224</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)    │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ mobilenetv2_1.00_224            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1280</span>)     │     <span style=\"color: #00af00; text-decoration-color: #00af00\">2,257,984</span> │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Functional</span>)                    │                        │               │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ global_average_pooling2d        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1280</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling2D</span>)        │                        │               │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">163,968</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
              "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)              │           <span style=\"color: #00af00; text-decoration-color: #00af00\">387</span> │\n",
              "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m2,422,339\u001b[0m (9.24 MB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,422,339</span> (9.24 MB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m164,355\u001b[0m (642.01 KB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">164,355</span> (642.01 KB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m2,257,984\u001b[0m (8.61 MB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,257,984</span> (8.61 MB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "None\n",
            "\n",
            "🎯 Starting training...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n",
            "  self._warn_if_super_not_called()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/15\n",
            "\u001b[1m88/88\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m313s\u001b[0m 3s/step - accuracy: 0.7996 - loss: 0.5239 - val_accuracy: 0.9365 - val_loss: 0.1655 - learning_rate: 0.0010\n",
            "Epoch 2/15\n",
            "\u001b[1m88/88\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m325s\u001b[0m 4s/step - accuracy: 0.9281 - loss: 0.1814 - val_accuracy: 0.9688 - val_loss: 0.0954 - learning_rate: 0.0010\n",
            "Epoch 3/15\n",
            "\u001b[1m88/88\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m311s\u001b[0m 3s/step - accuracy: 0.9543 - loss: 0.1323 - val_accuracy: 0.9740 - val_loss: 0.0828 - learning_rate: 0.0010\n",
            "Epoch 4/15\n",
            "\u001b[1m88/88\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m323s\u001b[0m 4s/step - accuracy: 0.9517 - loss: 0.1351 - val_accuracy: 0.9771 - val_loss: 0.0667 - learning_rate: 0.0010\n",
            "Epoch 5/15\n",
            "\u001b[1m88/88\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m295s\u001b[0m 3s/step - accuracy: 0.9580 - loss: 0.1078 - val_accuracy: 0.9745 - val_loss: 0.0669 - learning_rate: 0.0010\n",
            "Epoch 6/15\n",
            "\u001b[1m88/88\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m280s\u001b[0m 3s/step - accuracy: 0.9700 - loss: 0.0849 - val_accuracy: 0.9839 - val_loss: 0.0446 - learning_rate: 0.0010\n",
            "Epoch 7/15\n",
            "\u001b[1m88/88\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m327s\u001b[0m 4s/step - accuracy: 0.9705 - loss: 0.0887 - val_accuracy: 0.9839 - val_loss: 0.0454 - learning_rate: 0.0010\n",
            "Epoch 8/15\n",
            "\u001b[1m88/88\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m365s\u001b[0m 4s/step - accuracy: 0.9725 - loss: 0.0854 - val_accuracy: 0.9859 - val_loss: 0.0388 - learning_rate: 0.0010\n",
            "Epoch 9/15\n",
            "\u001b[1m88/88\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m306s\u001b[0m 3s/step - accuracy: 0.9697 - loss: 0.0779 - val_accuracy: 0.9854 - val_loss: 0.0360 - learning_rate: 0.0010\n",
            "Epoch 10/15\n",
            "\u001b[1m88/88\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m324s\u001b[0m 4s/step - accuracy: 0.9762 - loss: 0.0719 - val_accuracy: 0.9922 - val_loss: 0.0292 - learning_rate: 0.0010\n",
            "Epoch 11/15\n",
            "\u001b[1m88/88\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m278s\u001b[0m 3s/step - accuracy: 0.9806 - loss: 0.0565 - val_accuracy: 0.9854 - val_loss: 0.0375 - learning_rate: 0.0010\n",
            "Epoch 12/15\n",
            "\u001b[1m88/88\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m395s\u001b[0m 4s/step - accuracy: 0.9758 - loss: 0.0664 - val_accuracy: 0.9917 - val_loss: 0.0222 - learning_rate: 0.0010\n",
            "Epoch 13/15\n",
            "\u001b[1m88/88\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m310s\u001b[0m 3s/step - accuracy: 0.9794 - loss: 0.0477 - val_accuracy: 0.9927 - val_loss: 0.0220 - learning_rate: 0.0010\n",
            "Epoch 14/15\n",
            "\u001b[1m88/88\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m294s\u001b[0m 3s/step - accuracy: 0.9794 - loss: 0.0649 - val_accuracy: 0.9870 - val_loss: 0.0322 - learning_rate: 0.0010\n",
            "Epoch 15/15\n",
            "\u001b[1m88/88\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m274s\u001b[0m 3s/step - accuracy: 0.9811 - loss: 0.0509 - val_accuracy: 0.9932 - val_loss: 0.0174 - learning_rate: 0.0010\n",
            "\n",
            "🔧 Starting fine-tuning...\n",
            "Epoch 16/25\n",
            "\u001b[1m88/88\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m401s\u001b[0m 4s/step - accuracy: 0.9216 - loss: 0.2341 - val_accuracy: 0.9964 - val_loss: 0.0133 - learning_rate: 1.0000e-05\n",
            "Epoch 17/25\n",
            "\u001b[1m88/88\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m367s\u001b[0m 4s/step - accuracy: 0.9311 - loss: 0.1962 - val_accuracy: 0.9974 - val_loss: 0.0131 - learning_rate: 1.0000e-05\n",
            "Epoch 18/25\n",
            "\u001b[1m88/88\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m392s\u001b[0m 4s/step - accuracy: 0.9528 - loss: 0.1260 - val_accuracy: 0.9979 - val_loss: 0.0135 - learning_rate: 1.0000e-05\n",
            "Epoch 19/25\n",
            "\u001b[1m88/88\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m390s\u001b[0m 4s/step - accuracy: 0.9564 - loss: 0.1075 - val_accuracy: 0.9958 - val_loss: 0.0145 - learning_rate: 1.0000e-05\n",
            "Epoch 20/25\n",
            "\u001b[1m88/88\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m367s\u001b[0m 4s/step - accuracy: 0.9616 - loss: 0.1107 - val_accuracy: 0.9969 - val_loss: 0.0129 - learning_rate: 1.0000e-05\n",
            "Epoch 21/25\n",
            "\u001b[1m88/88\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m378s\u001b[0m 4s/step - accuracy: 0.9703 - loss: 0.0921 - val_accuracy: 0.9974 - val_loss: 0.0108 - learning_rate: 1.0000e-05\n",
            "Epoch 22/25\n",
            "\u001b[1m88/88\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m380s\u001b[0m 4s/step - accuracy: 0.9702 - loss: 0.0735 - val_accuracy: 0.9974 - val_loss: 0.0114 - learning_rate: 1.0000e-05\n",
            "Epoch 23/25\n",
            "\u001b[1m88/88\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m381s\u001b[0m 4s/step - accuracy: 0.9772 - loss: 0.0659 - val_accuracy: 0.9979 - val_loss: 0.0109 - learning_rate: 1.0000e-05\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Model saved to: /content/drive/MyDrive/DATA./data/models/waste_classifier.h5\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "[Errno 2] No such file or directory: '/content/drive/MyDrive/DATA/training_history.png'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m/tmp/ipython-input-155209626.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    207\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    208\u001b[0m     \u001b[0;31m# Plot training history\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 209\u001b[0;31m     \u001b[0mplot_training_history\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    210\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    211\u001b[0m     \u001b[0;31m# Print final metrics\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/tmp/ipython-input-155209626.py\u001b[0m in \u001b[0;36mplot_training_history\u001b[0;34m(history)\u001b[0m\n\u001b[1;32m    199\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    200\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtight_layout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 201\u001b[0;31m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msavefig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive/MyDrive/DATA/training_history.png'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    202\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    203\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36msavefig\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m   1241\u001b[0m     \u001b[0;31m# savefig default implementation has no return, so mypy is unhappy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1242\u001b[0m     \u001b[0;31m# presumably this is here because subclasses can return?\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1243\u001b[0;31m     \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msavefig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[func-returns-value]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1244\u001b[0m     \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw_idle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Need this if 'transparent=True', to reset colors.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1245\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mres\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/matplotlib/figure.py\u001b[0m in \u001b[0;36msavefig\u001b[0;34m(self, fname, transparent, **kwargs)\u001b[0m\n\u001b[1;32m   3488\u001b[0m                 \u001b[0;32mfor\u001b[0m \u001b[0max\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3489\u001b[0m                     \u001b[0m_recursively_make_axes_transparent\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstack\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0max\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3490\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcanvas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprint_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3491\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3492\u001b[0m     def ginput(self, n=1, timeout=30, show_clicks=True,\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36mprint_figure\u001b[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, pad_inches, bbox_extra_artists, backend, **kwargs)\u001b[0m\n\u001b[1;32m   2182\u001b[0m                 \u001b[0;31m# force the figure dpi to 72), so we need to set it again here.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2183\u001b[0m                 \u001b[0;32mwith\u001b[0m \u001b[0mcbook\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_setattr_cm\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdpi\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdpi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2184\u001b[0;31m                     result = print_method(\n\u001b[0m\u001b[1;32m   2185\u001b[0m                         \u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2186\u001b[0m                         \u001b[0mfacecolor\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfacecolor\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/matplotlib/backend_bases.py\u001b[0m in \u001b[0;36m<lambda>\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m   2038\u001b[0m                 \"bbox_inches_restore\"}\n\u001b[1;32m   2039\u001b[0m             \u001b[0mskip\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0moptional_kws\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0minspect\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmeth\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2040\u001b[0;31m             print_method = functools.wraps(meth)(lambda *args, **kwargs: meth(\n\u001b[0m\u001b[1;32m   2041\u001b[0m                 *args, **{k: v for k, v in kwargs.items() if k not in skip}))\n\u001b[1;32m   2042\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# Let third-parties do as they see fit.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/matplotlib/backends/backend_agg.py\u001b[0m in \u001b[0;36mprint_png\u001b[0;34m(self, filename_or_obj, metadata, pil_kwargs)\u001b[0m\n\u001b[1;32m    479\u001b[0m             \u001b[0;34m*\u001b[0m\u001b[0mmetadata\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mincluding\u001b[0m \u001b[0mthe\u001b[0m \u001b[0mdefault\u001b[0m \u001b[0;34m'Software'\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    480\u001b[0m         \"\"\"\n\u001b[0;32m--> 481\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_print_pil\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename_or_obj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"png\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpil_kwargs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmetadata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    482\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    483\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mprint_to_buffer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/matplotlib/backends/backend_agg.py\u001b[0m in \u001b[0;36m_print_pil\u001b[0;34m(self, filename_or_obj, fmt, pil_kwargs, metadata)\u001b[0m\n\u001b[1;32m    428\u001b[0m         \"\"\"\n\u001b[1;32m    429\u001b[0m         \u001b[0mFigureCanvasAgg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdraw\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 430\u001b[0;31m         mpl.image.imsave(\n\u001b[0m\u001b[1;32m    431\u001b[0m             \u001b[0mfilename_or_obj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuffer_rgba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfmt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morigin\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"upper\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    432\u001b[0m             dpi=self.figure.dpi, metadata=metadata, pil_kwargs=pil_kwargs)\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/matplotlib/image.py\u001b[0m in \u001b[0;36mimsave\u001b[0;34m(fname, arr, vmin, vmax, cmap, format, origin, dpi, metadata, pil_kwargs)\u001b[0m\n\u001b[1;32m   1632\u001b[0m         \u001b[0mpil_kwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetdefault\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"format\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1633\u001b[0m         \u001b[0mpil_kwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetdefault\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"dpi\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mdpi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdpi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1634\u001b[0;31m         \u001b[0mimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mpil_kwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1635\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1636\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.12/dist-packages/PIL/Image.py\u001b[0m in \u001b[0;36msave\u001b[0;34m(self, fp, format, **params)\u001b[0m\n\u001b[1;32m   2581\u001b[0m                 \u001b[0mfp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuiltins\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"r+b\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2582\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2583\u001b[0;31m                 \u001b[0mfp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuiltins\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"w+b\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2584\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2585\u001b[0m             \u001b[0mfp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mIO\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mbytes\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfp\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '/content/drive/MyDrive/DATA/training_history.png'"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pip install fastai\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "id": "_Y9aoW-En4RQ",
        "outputId": "9d4a1697-f02a-41ef-fba3-131ebb91441c"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid syntax (ipython-input-1348293147.py, line 1)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"/tmp/ipython-input-1348293147.py\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    import pip install fastai\u001b[0m\n\u001b[0m               ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import load_model\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.metrics import classification_report, confusion_matrix\n",
        "import seaborn as sns\n",
        "import os\n",
        "\n",
        "def evaluate_waste_model():\n",
        "    \"\"\"\n",
        "    Evaluate the trained waste classification model\n",
        "    \"\"\"\n",
        "    print(\"🔍 EVALUATING MODEL PERFORMANCE\")\n",
        "    print(\"=\" * 50)\n",
        "\n",
        "    # Set paths\n",
        "    base_path = \"/content/drive/MyDrive/DATA./data\"\n",
        "    model_path = f\"{base_path}/models/waste_classifier.h5\"\n",
        "    test_path = f\"{base_path}/processed/testing\"\n",
        "\n",
        "    # Check if model exists\n",
        "    if not os.path.exists(model_path):\n",
        "        print(f\"❌ Model not found at: {model_path}\")\n",
        "        print(\"Please train the model first!\")\n",
        "        return\n",
        "\n",
        "    # Load the trained model\n",
        "    print(\"📦 Loading trained model...\")\n",
        "    model = load_model(model_path)\n",
        "    print(\"✅ Model loaded successfully!\")\n",
        "\n",
        "    # Test data generator\n",
        "    test_datagen = ImageDataGenerator(rescale=1./255)\n",
        "\n",
        "    test_generator = test_datagen.flow_from_directory(\n",
        "        test_path,\n",
        "        target_size=(224, 224),\n",
        "        batch_size=32,\n",
        "        class_mode='categorical',\n",
        "        shuffle=False  # Important for correct label order\n",
        "    )\n",
        "\n",
        "    # Get true labels and predictions\n",
        "    print(\"\\n🎯 Making predictions on test set...\")\n",
        "    y_true = test_generator.classes\n",
        "    y_pred_prob = model.predict(test_generator)\n",
        "    y_pred = np.argmax(y_pred_prob, axis=1)\n",
        "\n",
        "    # Calculate accuracy\n",
        "    test_accuracy = np.sum(y_pred == y_true) / len(y_true)\n",
        "    print(f\"📊 Test Accuracy: {test_accuracy:.4f} ({test_accuracy*100:.2f}%)\")\n",
        "\n",
        "    # Classification report\n",
        "    class_names = list(test_generator.class_indices.keys())\n",
        "    print(\"\\n📈 Classification Report:\")\n",
        "    print(classification_report(y_true, y_pred, target_names=class_names))\n",
        "\n",
        "    # Confusion matrix\n",
        "    plt.figure(figsize=(8, 6))\n",
        "    cm = confusion_matrix(y_true, y_pred)\n",
        "    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n",
        "                xticklabels=class_names, yticklabels=class_names)\n",
        "    plt.title('Confusion Matrix')\n",
        "    plt.ylabel('True Label')\n",
        "    plt.xlabel('Predicted Label')\n",
        "    plt.tight_layout()\n",
        "    plt.savefig(f'{base_path}/confusion_matrix.png')\n",
        "    plt.show()\n",
        "\n",
        "    # Test on individual samples\n",
        "    print(\"\\n🧪 Testing on sample images...\")\n",
        "    test_sample_images(model, test_path, class_names)\n",
        "\n",
        "def test_sample_images(model, test_path, class_names):\n",
        "    \"\"\"\n",
        "    Test the model on individual sample images\n",
        "    \"\"\"\n",
        "    from tensorflow.keras.preprocessing import image\n",
        "    import random\n",
        "\n",
        "    # Test a few random images from each category\n",
        "    for category in class_names:\n",
        "        category_path = os.path.join(test_path, category)\n",
        "        if os.path.exists(category_path):\n",
        "            images = [f for f in os.listdir(category_path)\n",
        "                     if f.lower().endswith(('.png', '.jpg', '.jpeg'))]\n",
        "\n",
        "            if images:\n",
        "                # Pick 2 random images\n",
        "                sample_images = random.sample(images, min(2, len(images)))\n",
        "\n",
        "                for img_name in sample_images:\n",
        "                    img_path = os.path.join(category_path, img_name)\n",
        "\n",
        "                    # Load and preprocess image\n",
        "                    img = image.load_img(img_path, target_size=(224, 224))\n",
        "                    img_array = image.img_to_array(img)\n",
        "                    img_array = np.expand_dims(img_array, axis=0)\n",
        "                    img_array /= 255.0\n",
        "\n",
        "                    # Make prediction\n",
        "                    prediction = model.predict(img_array)\n",
        "                    predicted_class = class_names[np.argmax(prediction)]\n",
        "                    confidence = np.max(prediction)\n",
        "\n",
        "                    print(f\"   📸 {category}/{img_name}:\")\n",
        "                    print(f\"      🎯 Predicted: {predicted_class}\")\n",
        "                    print(f\"      📊 Confidence: {confidence:.4f}\")\n",
        "                    print(f\"      ✅ Correct: {predicted_class == category}\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    evaluate_waste_model()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "k7N_kaWWnmo2",
        "outputId": "574fbd80-4e46-43b2-edc0-c60332cbe693"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🔍 EVALUATING MODEL PERFORMANCE\n",
            "==================================================\n",
            "📦 Loading trained model...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "✅ Model loaded successfully!\n",
            "Found 1983 images belonging to 3 classes.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:121: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n",
            "  self._warn_if_super_not_called()\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "🎯 Making predictions on test set...\n",
            "\u001b[1m62/62\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m111s\u001b[0m 2s/step\n",
            "📊 Test Accuracy: 0.9975 (99.75%)\n",
            "\n",
            "📈 Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "biodegradable       1.00      0.99      1.00       545\n",
            "    hazardous       1.00      1.00      1.00       206\n",
            "   recyclable       1.00      1.00      1.00      1232\n",
            "\n",
            "     accuracy                           1.00      1983\n",
            "    macro avg       1.00      1.00      1.00      1983\n",
            " weighted avg       1.00      1.00      1.00      1983\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "🧪 Testing on sample images...\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2s/step\n",
            "   📸 biodegradable/trash_191.jpg:\n",
            "      🎯 Predicted: biodegradable\n",
            "      📊 Confidence: 0.9870\n",
            "      ✅ Correct: True\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 93ms/step\n",
            "   📸 biodegradable/trash_182.jpg:\n",
            "      🎯 Predicted: biodegradable\n",
            "      📊 Confidence: 0.9600\n",
            "      ✅ Correct: True\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 93ms/step\n",
            "   📸 hazardous/battery_185.jpg:\n",
            "      🎯 Predicted: hazardous\n",
            "      📊 Confidence: 1.0000\n",
            "      ✅ Correct: True\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 90ms/step\n",
            "   📸 hazardous/battery_178.jpg:\n",
            "      🎯 Predicted: hazardous\n",
            "      📊 Confidence: 1.0000\n",
            "      ✅ Correct: True\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 87ms/step\n",
            "   📸 recyclable/clothes_1104.jpg:\n",
            "      🎯 Predicted: recyclable\n",
            "      📊 Confidence: 1.0000\n",
            "      ✅ Correct: True\n",
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 89ms/step\n",
            "   📸 recyclable/clothes_1057.jpg:\n",
            "      🎯 Predicted: recyclable\n",
            "      📊 Confidence: 1.0000\n",
            "      ✅ Correct: True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "\n",
        "# Download your trained model\n",
        "files.download('/content/drive/MyDrive/DATA./data/models/waste_classifier.h5')\n",
        "\n",
        "# Also download requirements.txt\n",
        "with open('requirements.txt', 'w') as f:\n",
        "    f.write('''streamlit>=1.28.0\n",
        "tensorflow>=2.13.0\n",
        "pillow>=9.0.0\n",
        "numpy>=1.24.0\n",
        "matplotlib>=3.7.0\n",
        "opencv-python-headless>=4.8.0''')\n",
        "\n",
        "files.download('requirements.txt')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "XSXzjMzIylyF",
        "outputId": "5331834f-7df3-467c-e7f6-d2bf4bd7fc8a"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_6f2191ef-e6e8-4420-b523-2c82d9afcbdd\", \"waste_classifier.h5\", 26313576)"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_3eee04a4-70f2-4faf-bde6-e6dc20801782\", \"requirements.txt\", 112)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7a02d28f",
        "outputId": "2dab27d2-0014-46fa-fda2-c697c162119a"
      },
      "source": [
        "!pip install streamlit"
      ],
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting streamlit\n",
            "  Downloading streamlit-1.51.0-py3-none-any.whl.metadata (9.5 kB)\n",
            "Requirement already satisfied: altair!=5.4.0,!=5.4.1,<6,>=4.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (5.5.0)\n",
            "Requirement already satisfied: blinker<2,>=1.5.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (1.9.0)\n",
            "Requirement already satisfied: cachetools<7,>=4.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (5.5.2)\n",
            "Requirement already satisfied: click<9,>=7.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (8.3.0)\n",
            "Requirement already satisfied: numpy<3,>=1.23 in /usr/local/lib/python3.12/dist-packages (from streamlit) (2.0.2)\n",
            "Requirement already satisfied: packaging<26,>=20 in /usr/local/lib/python3.12/dist-packages (from streamlit) (25.0)\n",
            "Requirement already satisfied: pandas<3,>=1.4.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (2.2.2)\n",
            "Requirement already satisfied: pillow<13,>=7.1.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (11.3.0)\n",
            "Requirement already satisfied: protobuf<7,>=3.20 in /usr/local/lib/python3.12/dist-packages (from streamlit) (5.29.5)\n",
            "Requirement already satisfied: pyarrow<22,>=7.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (18.1.0)\n",
            "Requirement already satisfied: requests<3,>=2.27 in /usr/local/lib/python3.12/dist-packages (from streamlit) (2.32.4)\n",
            "Requirement already satisfied: tenacity<10,>=8.1.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (8.5.0)\n",
            "Requirement already satisfied: toml<2,>=0.10.1 in /usr/local/lib/python3.12/dist-packages (from streamlit) (0.10.2)\n",
            "Requirement already satisfied: typing-extensions<5,>=4.4.0 in /usr/local/lib/python3.12/dist-packages (from streamlit) (4.15.0)\n",
            "Requirement already satisfied: watchdog<7,>=2.1.5 in /usr/local/lib/python3.12/dist-packages (from streamlit) (6.0.0)\n",
            "Requirement already satisfied: gitpython!=3.1.19,<4,>=3.0.7 in /usr/local/lib/python3.12/dist-packages (from streamlit) (3.1.45)\n",
            "Collecting pydeck<1,>=0.8.0b4 (from streamlit)\n",
            "  Downloading pydeck-0.9.1-py2.py3-none-any.whl.metadata (4.1 kB)\n",
            "Requirement already satisfied: tornado!=6.5.0,<7,>=6.0.3 in /usr/local/lib/python3.12/dist-packages (from streamlit) (6.5.1)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.12/dist-packages (from altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (3.1.6)\n",
            "Requirement already satisfied: jsonschema>=3.0 in /usr/local/lib/python3.12/dist-packages (from altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (4.25.1)\n",
            "Requirement already satisfied: narwhals>=1.14.2 in /usr/local/lib/python3.12/dist-packages (from altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (2.10.0)\n",
            "Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.12/dist-packages (from gitpython!=3.1.19,<4,>=3.0.7->streamlit) (4.0.12)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.12/dist-packages (from pandas<3,>=1.4.0->streamlit) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.12/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.12/dist-packages (from pandas<3,>=1.4.0->streamlit) (2025.2)\n",
            "Requirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.12/dist-packages (from requests<3,>=2.27->streamlit) (3.4.4)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.12/dist-packages (from requests<3,>=2.27->streamlit) (3.11)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.12/dist-packages (from requests<3,>=2.27->streamlit) (2.5.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.12/dist-packages (from requests<3,>=2.27->streamlit) (2025.10.5)\n",
            "Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.12/dist-packages (from gitdb<5,>=4.0.1->gitpython!=3.1.19,<4,>=3.0.7->streamlit) (5.0.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.12/dist-packages (from jinja2->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (3.0.3)\n",
            "Requirement already satisfied: attrs>=22.2.0 in /usr/local/lib/python3.12/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (25.4.0)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.12/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (2025.9.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.12/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (0.37.0)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.12/dist-packages (from jsonschema>=3.0->altair!=5.4.0,!=5.4.1,<6,>=4.0->streamlit) (0.28.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.12/dist-packages (from python-dateutil>=2.8.2->pandas<3,>=1.4.0->streamlit) (1.17.0)\n",
            "Downloading streamlit-1.51.0-py3-none-any.whl (10.2 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m10.2/10.2 MB\u001b[0m \u001b[31m60.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading pydeck-0.9.1-py2.py3-none-any.whl (6.9 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m6.9/6.9 MB\u001b[0m \u001b[31m63.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: pydeck, streamlit\n",
            "Successfully installed pydeck-0.9.1 streamlit-1.51.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import streamlit as st\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import load_model\n",
        "from tensorflow.keras.preprocessing import image\n",
        "import numpy as np\n",
        "from PIL import Image\n",
        "import os\n",
        "\n",
        "# Set page configuration\n",
        "st.set_page_config(\n",
        "    page_title=\"SmartWasteAI - Waste Classification\",\n",
        "    page_icon=\"🗑️\",\n",
        "    layout=\"centered\"\n",
        ")\n",
        "\n",
        "# Load the trained model (with caching to avoid reloading on every interaction)\n",
        "@st.cache_resource\n",
        "def load_waste_model():\n",
        "    try:\n",
        "        model = load_model('/content/drive/MyDrive/DATA./data/models/waste_classifier.h5')\n",
        "        return model\n",
        "    except Exception as e:\n",
        "        st.error(f\"Error loading model: {e}\")\n",
        "        return None\n",
        "\n",
        "# Load model\n",
        "model = load_waste_model()\n",
        "\n",
        "# Define class labels and their corresponding bin colors\n",
        "class_labels = {\n",
        "    0: {'name': 'Biodegradable', 'bin_color': 'Green', 'bin_emoji': '🟢',\n",
        "        'bin_info': 'For organic waste like food scraps, garden waste, and biodegradable materials.'},\n",
        "    1: {'name': 'Hazardous', 'bin_color': 'Red', 'bin_emoji': '🔴',\n",
        "        'bin_info': 'For dangerous materials like batteries, chemicals, medical waste, and electronics.'},\n",
        "    2: {'name': 'Recyclable', 'bin_color': 'Blue', 'bin_emoji': '🔵',\n",
        "        'bin_info': 'For materials that can be recycled like paper, plastic, glass, metal, and textiles.'}\n",
        "}\n",
        "\n",
        "# Function to preprocess the uploaded image\n",
        "def preprocess_image(img):\n",
        "    img = img.resize((224, 224))  # Resize to match model's expected input\n",
        "    img_array = image.img_to_array(img)\n",
        "    img_array = np.expand_dims(img_array, axis=0)  # Create batch dimension\n",
        "    img_array /= 255.0  # Rescale pixel values\n",
        "    return img_array\n",
        "\n",
        "# Function to make prediction\n",
        "def predict_waste(img_array):\n",
        "    if model is None:\n",
        "        return None, 0.0\n",
        "\n",
        "    predictions = model.predict(img_array, verbose=0)\n",
        "    predicted_class = np.argmax(predictions[0])\n",
        "    confidence = np.max(predictions[0])\n",
        "    return predicted_class, confidence\n",
        "\n",
        "# Streamlit UI\n",
        "st.title(\"♻️ SmartWasteAI\")\n",
        "st.markdown(\"### AI-Powered Waste Segregation for Smart Cities\")\n",
        "st.write(\"Upload an image of a waste item, and our AI will classify it and recommend the correct disposal bin.\")\n",
        "\n",
        "# File uploader\n",
        "uploaded_file = st.file_uploader(\"Choose an image...\", type=[\"jpg\", \"jpeg\", \"png\"])\n",
        "\n",
        "if uploaded_file is not None:\n",
        "    # Display the uploaded image\n",
        "    image_display = Image.open(uploaded_file)\n",
        "    st.image(image_display, caption=\"Uploaded Image\", use_column_width=True)\n",
        "\n",
        "    # Preprocess and predict\n",
        "    with st.spinner('🔍 Analyzing the waste item...'):\n",
        "        processed_image = preprocess_image(image_display)\n",
        "        predicted_class, confidence = predict_waste(processed_image)\n",
        "\n",
        "    if predicted_class is not None:\n",
        "        # Get class info\n",
        "        class_info = class_labels[predicted_class]\n",
        "\n",
        "        # Display results\n",
        "        st.success(\"✅ Analysis Complete!\")\n",
        "\n",
        "        # Create columns for layout\n",
        "        col1, col2 = st.columns(2)\n",
        "\n",
        "        with col1:\n",
        "            st.metric(label=\"**Predicted Waste Type**\",\n",
        "                     value=f\"{class_info['bin_emoji']} {class_info['name']}\")\n",
        "            st.metric(label=\"**Confidence Level**\",\n",
        "                     value=f\"{confidence:.2%}\")\n",
        "\n",
        "        with col2:\n",
        "            # Display bin recommendation\n",
        "            st.markdown(f\"### 🗑️ Recommended Bin: **{class_info['bin_color']} Bin** {class_info['bin_emoji']}\")\n",
        "            st.info(class_info['bin_info'])\n",
        "\n",
        "        # Confidence bar\n",
        "        st.markdown(\"### 📊 Confidence Level\")\n",
        "        st.progress(float(confidence))\n",
        "        st.write(f\"Model is {confidence:.2%} confident about this prediction\")\n",
        "\n",
        "    else:\n",
        "        st.error(\"❌ Could not process the image. Please try another image.\")\n",
        "\n",
        "# Add a sidebar with information\n",
        "with st.sidebar:\n",
        "    st.header(\"ℹ️ About SmartWasteAI\")\n",
        "    st.write(\"This intelligent system uses deep learning to classify waste into three categories:\")\n",
        "\n",
        "    st.markdown(\"\"\"\n",
        "    **🟢 Green Bin - Biodegradable Waste**\n",
        "    - Food scraps\n",
        "    - Garden waste\n",
        "    - Organic materials\n",
        "\n",
        "    **🔵 Blue Bin - Recyclable Waste**\n",
        "    - Paper & cardboard\n",
        "    - Plastic containers\n",
        "    - Glass bottles\n",
        "    - Metal cans\n",
        "    - Textiles\n",
        "\n",
        "    **🔴 Red Bin - Hazardous Waste**\n",
        "    - Batteries\n",
        "    - Electronics\n",
        "    - Chemicals\n",
        "    - Medical waste\n",
        "    \"\"\")\n",
        "\n",
        "    st.markdown(\"---\")\n",
        "    st.write(\"**🔧 Built with:**\")\n",
        "    st.write(\"- TensorFlow & Keras\")\n",
        "    st.write(\"- MobileNetV2 (Transfer Learning)\")\n",
        "    st.write(\"- Streamlit\")\n",
        "    st.write(\"---\")\n",
        "    st.write(\"**🎓 Educational Project**\")\n",
        "    st.write(\"Machine Learning & Deep Learning Course\")\n",
        "\n",
        "# Footer\n",
        "st.markdown(\"---\")\n",
        "st.markdown(\n",
        "    \"Developed as part of the **AI in Action Project** | \"\n",
        "    \"**Machine Learning & Deep Learning Course**\"\n",
        ")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qpST5RcDznDD",
        "outputId": "f101f86e-8af9-478b-81a9-4aed580d48db"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "2025-10-31 15:06:45.656 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:45.658 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:46.196 \n",
            "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
            "  command:\n",
            "\n",
            "    streamlit run /usr/local/lib/python3.12/dist-packages/colab_kernel_launcher.py [ARGUMENTS]\n",
            "2025-10-31 15:06:46.197 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:46.199 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:46.201 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:46.705 Thread 'Thread-20': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:46.709 Thread 'Thread-20': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:46.713 Thread 'Thread-20': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n",
            "2025-10-31 15:06:47.465 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.467 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.468 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.471 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.473 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.475 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.477 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.479 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.481 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.483 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.485 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.486 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.488 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.492 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.493 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.495 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.496 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.497 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.502 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.503 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.504 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.505 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.506 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.507 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.509 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.511 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.512 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.514 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.515 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.516 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.517 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.518 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.519 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.521 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.521 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.522 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.523 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.524 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.525 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.527 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.528 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.529 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.532 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.533 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.533 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.536 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.537 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.539 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.541 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.541 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.543 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.545 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.547 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.548 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.551 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.552 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
            "2025-10-31 15:06:47.554 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DeltaGenerator()"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    }
  ]
}

# -*- coding: utf-8 -*-
"""Untitled30.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1orel0E40WI9_8Yo1rpf2rGo635d7ZH9f
"""

!pip install streamlit

import streamlit as st
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np
from PIL import Image
import os

# Set page configuration
st.set_page_config(
    page_title="SmartWasteAI - Waste Classification",
    page_icon="üóëÔ∏è",
    layout="centered"
)

# Load the trained model (with caching to avoid reloading on every interaction)
@st.cache_resource
def load_waste_model():
    try:
        model = load_model('/content/drive/MyDrive/DATA./models/waste_classifier.h5')
        return model
    except Exception as e:
        st.error(f"Error loading model: {e}")
        return None

# Load model
model = load_waste_model()

# Define class labels and their corresponding bin colors
class_labels = {
    0: {'name': 'Biodegradable', 'bin_color': 'Green', 'bin_emoji': 'üü¢',
        'bin_info': 'For organic waste like food scraps, garden waste, and biodegradable materials.'},
    1: {'name': 'Hazardous', 'bin_color': 'Red', 'bin_emoji': 'üî¥',
        'bin_info': 'For dangerous materials like batteries, chemicals, medical waste, and electronics.'},
    2: {'name': 'Recyclable', 'bin_color': 'Blue', 'bin_emoji': 'üîµ',
        'bin_info': 'For materials that can be recycled like paper, plastic, glass, metal, and textiles.'}
}

# Function to preprocess the uploaded image
def preprocess_image(img):
    img = img.resize((224, 224))  # Resize to match model's expected input
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)  # Create batch dimension
    img_array /= 255.0  # Rescale pixel values
    return img_array

# Function to make prediction
def predict_waste(img_array):
    if model is None:
        return None, 0.0

    predictions = model.predict(img_array, verbose=0)
    predicted_class = np.argmax(predictions[0])
    confidence = np.max(predictions[0])
    return predicted_class, confidence

# Streamlit UI
st.title("‚ôªÔ∏è SmartWasteAI")
st.markdown("### AI-Powered Waste Segregation for Smart Cities")
st.write("Upload an image of a waste item, and our AI will classify it and recommend the correct disposal bin.")

# File uploader
uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # Display the uploaded image
    image_display = Image.open(uploaded_file)
    st.image(image_display, caption="Uploaded Image", use_column_width=True)

    # Preprocess and predict
    with st.spinner('üîç Analyzing the waste item...'):
        processed_image = preprocess_image(image_display)
        predicted_class, confidence = predict_waste(processed_image)

    if predicted_class is not None:
        # Get class info
        class_info = class_labels[predicted_class]

        # Display results
        st.success("‚úÖ Analysis Complete!")

        # Create columns for layout
        col1, col2 = st.columns(2)

        with col1:
            st.metric(label="**Predicted Waste Type**",
                     value=f"{class_info['bin_emoji']} {class_info['name']}")
            st.metric(label="**Confidence Level**",
                     value=f"{confidence:.2%}")

        with col2:
            # Display bin recommendation
            st.markdown(f"### üóëÔ∏è Recommended Bin: **{class_info['bin_color']} Bin** {class_info['bin_emoji']}")
            st.info(class_info['bin_info'])

        # Confidence bar
        st.markdown("### üìä Confidence Level")
        st.progress(float(confidence))
        st.write(f"Model is {confidence:.2%} confident about this prediction")

    else:
        st.error("‚ùå Could not process the image. Please try another image.")

# Add a sidebar with information
with st.sidebar:
    st.header("‚ÑπÔ∏è About SmartWasteAI")
    st.write("This intelligent system uses deep learning to classify waste into three categories:")

    st.markdown("""
    **üü¢ Green Bin - Biodegradable Waste**
    - Food scraps
    - Garden waste
    - Organic materials

    **üîµ Blue Bin - Recyclable Waste**
    - Paper & cardboard
    - Plastic containers
    - Glass bottles
    - Metal cans
    - Textiles

    **üî¥ Red Bin - Hazardous Waste**
    - Batteries
    - Electronics
    - Chemicals
    - Medical waste
    """)

    st.markdown("---")
    st.write("**üîß Built with:**")
    st.write("- TensorFlow & Keras")
    st.write("- MobileNetV2 (Transfer Learning)")
    st.write("- Streamlit")
    st.write("---")
    st.write("**üéì Educational Project**")
    st.write("Machine Learning & Deep Learning Course")

# Footer
st.markdown("---")
st.markdown(
    "Developed as part of the **AI in Action Project** | "
    "**Machine Learning & Deep Learning Course**"
)
